{
    "loc": {
        "files": ["01-deutch-jotza", "02-vazirani", "03-simon", "04-grover"],
        "directories": [
            "hosted/cirq", 
            "hosted/qapl", 
            "hosted/qiskit", 
            "hosted/qrisp",
            "standalone/qmod",
            "standalone/q#", 
            "standalone/qasm",
            "classic"
        ],
        "comment_symbols": {
        ".py": "#",
        ".qs": "//",
        ".qmod": "//",
        ".ipynb": "#",
        ".q": "//",
        ".qml": "//",
        ".aplf": "⍝",
        ".qasm": "//",
        ".qpl": "//"
        },
        "output": "evaluation/results/loc.csv"
    },
    "cc": {
        "files": [ "01-deutch-jotza","02-vazirani", "03-simon", "04-grover"],
        "directories": [
        "hosted/cirq",
         "hosted/qiskit",
         "hosted/qrisp"
        ],
        "comment_symbols": {
        ".py": "#"
        },
        "output": "evaluation/results/cyclomatic_complexity.csv",
         "constructs": {
            "python": ["if", "elif", "for", "while", "except", "with", "assert", "list", "set", "dict", "and", "or"],           
            "qmod": ["if", "else", "repeat", "within", "apply", "lambda", "and", "or"],
            "q#": ["if", "elif", "for", "ApplyToEachA", "try", "catch", "repeat", "until"],
            "APL": ["→", "¨", "⍣", "⍬", ",", "⍤", "∧", "∨", "∪", "⋄", "⎕SIGNAL", "⎕TRAP", "⎕ASSERT"],
            "qasm": ["if", "else"] 
        }
    },

    "ccc": {
        "files": [ "01-deutch-jotza","02-vazirani", "03-simon", "04-grover"],
        "directories": [
            "hosted/cirq", 
            "hosted/qapl", 
            "hosted/qiskit", 
            "hosted/qrisp",
            "standalone/qmod",
            "standalone/q#", 
            "standalone/qasm",
            "classic"
        ],
        "comment_symbols": {
        ".py": "#",
        ".qs": "//",
        ".qmod": "//",
        ".ipynb": "#",
        ".q": "//",
        ".qml": "//",
        ".aplf": "⍝",
        ".qasm": "//",
        ".qpl": "//"
        },
        "output": "evaluation/results/cyclomatic_complexity_calculator.csv",
        "constructs": {
            "py": ["if", "elif", "for", "while", "except", "with", "assert", "list", "set", "dict", "and", "or"],           
            "qmod": ["if", "repeat", "within", "apply", "lambda", "and", "or"],
            "qs": ["if", "elif", "for", "ApplyToEachA","MeasureEachZ", "try", "catch", "repeat", "until"],
            "aplf": ["→","¨", "⍣", "⍬", ",", "⍤", "∧", "∨", "∪", "⋄", "⎕SIGNAL", "⎕TRAP", "⎕ASSERT"],
            "qasm": ["if"] 
        }
    },
    "halstead": {
        "files": ["01-deutch-jotza", "02-vazirani", "03-simon", "04-grover"],
            "directories": [
            "hosted/cirq", 
            "hosted/qapl", 
            "hosted/qiskit", 
            "hosted/qrisp",
            "standalone/qmod", 
            "standalone/q#", 
            "standalone/qasm",
            "classic"
        ],
        "comment_symbols": {
        ".py": "#",
        ".qs": "//",
        ".qmod": "//",
        ".ipynb": "#",
        ".q": "//",
        ".qml": "//",
        ".aplf": "⍝",
        ".qasm": "//",
        ".qpl": "//"
        },        
        "output": "evaluation/results/halstead.csv",
        "operators": {
            "arithmatic": ["+", "-", "*", "/", "//", "%", "**","=", "+=", "-=", "*=", "/=", "//=", "%=", "**=","^=","^","&"],
            "python": ["==", "!=", ">", "<", ">=", "<=",
                "and", "or", "not", "&", "|", "^", "~", "<<", ">>","_",
                "for","if","else", "int","is", "is not", "in", "not in","np","pi","sqrt","def",
                "enumerate", "append","print","return","list","format","all","len"],

            "qiskit": ["x","h","cx","to_gate","measure","range","get_backend","transpile","QuantumCircuit","mcx","get_counts","draw","Aer"  ],           
            "cirq":  [
                  "range", "cirq","LineQubit", "CX","on_each",
                "Circuit", "X", "H", "measure", "CNOT", ":", ",", "(", "[", ".","Moment","TOFFOLI","Simulator"
            ],
            "qrisp": [ "x","h","cx","measure","len","pass","QuantumCircuit","QuantumVariable","qrisp","mcx","range","to_gate" ],
            "qapl": [
                "+", "-", "×", "÷", "*", "⌈", "⌊", "|",
                "=", "≠", "<", "≤", ">", "≥", "∧", "∨", "~",
                "⍴", ",", "⍪", "⌽", "⊖", "↑", "↓", "⍉", "⊂", "⊃", "≡", "≢", "∊", "⍷",
                "[", "]", "⍋", "⍒", "⍳", "∩", "∪", "⍸",
                "?", "⍵", "⍺", "⍫", "⋄", "→", "::", "⍎", "⍕",
                "/", "\\", "⌿", "⍀", "∘", "⍣", "⍤", "⍥", "⍨", "⍞", "⍠",
                "+/", "-/", "×/", "÷/", "∧/", "∨/", "⌈/", "⌊/", "=/", "≠/", "</", "≤/", ">/", "≥/", "~/",
                "+\\", "-\\", "×\\", "÷\\", "∧\\", "∨\\", "⌈\\", "⌊\\", "=\\", "≠\\", "<\\", "≤\\", ">\\", "≥\\", "~\\",
                "⎕", "⋄", "→", ".quapl", ".gates", ".circuit", ".X", ".H", ".I", ".Z",".CNOT", "gCTR", ".measure", ".CX", ".CCX", ".SWAP", 
                ".CSWAP", ".CCSWAP", ".TOFFOLI", ".CTOFFOLI", ".CCX", ".sng", "q1", "q0", "unthread_vs", ".stage", 
                ".reg",".lib",".oracles",  "."
            ],            
            "qmod": ["qnum","qbit","allocate","output","within","apply","qfunc","hadamard_transform","lambda","{","(","[",
            "repeat", "IDENTITY","CX","H","min","|","phase_oracle","len","if","else","floor","int"],
            "q#": [
                "operation", "use", "let", "return", "for", "if", "else","Bool", "Result","[","{","(" ,"Unit",
                "Adj", "Ctl", "@EntryPoint()",  "..","Message","Controlled X","ApplyToEachA","ResetAll","MeasureEachZ","X","H","CNOT", "Length","Int",
                "Most","Qubit","in","mutable","Sqrt","Round","PI","IntAsDouble", "is","not"]  ,
            "qasm": ["qreg","creg","h","cx","[","->","ccx","measure"],
            "classic": ["zip","str","range","sum"]
        },
        "operands": {
            "qiskit": [],           
            "cirq": [],
            "qrisp": [],
            "qapl": [],
            "qmod": [],
            "q#": [],
            "qasm": [],
            "classic": []
        },
        "constraints_key": {
            "qiskit": ["from qiskit import QuantumCircuit","from qiskit import QuantumCircuit, transpile","from qiskit_aer import Aer","from qiskit.visualization import plot_histogram",
            "import numpy as np","from scipy.linalg import null_space"],           
            "cirq": ["import cirq","import numpy as np","import matplotlib.pyplot as plt",
                    "from scipy.linalg import null_space"],
            "qrisp": ["import qrisp","import numpy as np"],
            "qapl": ["Namespace", "EndNamespace"],
            "qmod": [],
            "q#":["namespace vazirani","namespace DeutschJozsa","namespace SimonAlgorithm","namespace GroverAlgorithm",
             "open Microsoft.Quantum.Intrinsic", "open Microsoft.Quantum.Measurement","open Microsoft.Quantum.Canon","open Microsoft.Quantum.Math",
            "open Microsoft.Quantum.Arrays","open Microsoft.Quantum.Convert","open Microsoft.Quantum.Diagnostics","EntryPoint"],

            "qasm": ["include", "qelib1.inc","OPENQASM 2.0"],
            "classic": []
        }
    }    
}
