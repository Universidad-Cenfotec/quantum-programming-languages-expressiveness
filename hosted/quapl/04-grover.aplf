:Namespace GROVER 
    phase ← {
        ⍝ ⍵: vector state
        ⍝ ⍺: list of lists with the elements to find, e.g., ((1 0 1) (1 0 0)) phase vs
        iter ← {
            x ← ⊃ 1↑⍺
            qubits_index  ← (⍳(2⍟1⌷⍴⍵))-1
            apply ← {     
                (qubits_index vs ) ← (1⊃⍵) (2⊃⍵)
                ((qubits_index) ({⍵=0:#.quapl.gates.X ⋄ ⍵=1:#.quapl.gates.I }¨ x )) #.quapl.circuit.stage vs
            }              
            res ← x apply (qubits_index ⍵)
            cz ← ((2⍟1⌷⍴⍵)-1) #.quapl.gates.gCTR (#.quapl.gates.Z) 
            res ← x apply (qubits_index (cz +.× res))
            (⍴(1↓⍺))=0: res
            (1↓⍺) ∇ res
        } 
        ⍺ iter ⍵
    }
:EndNamespace

_GROVER_ ← {
    ⍝ Grover algorithm
    ⍝ Takes a vector state in the 0 state (all qubits are in the 0 states).
    ⍝ Applies the algorithm with the passed oracle and returns the vector state without being measured.
    ⍝ ⍵: Initial vector state in the 0 state.
    ⍝ ⍺⍺: Oracle to be used in the Grover algorithm.
    X ← #.quapl.gates.X
    H ← #.quapl.gates.H
    I ← #.quapl.gates.I
    stage ← #.quapl.circuit.stage
    n_qubits ← (2⍟1⌷⍴(1⊃⍵))
    num_iter ←   ⌊((○1÷4) × (2*n_qubits)*0.5)     
    stg_ctrl ← (((⍳n_qubits)-1) ({H}¨(⍳n_qubits)))    
    mid_state ← stg_ctrl stage (1⊃⍵)        
    ⍝ mid state qubits 
    grover_iter ← {
        0 = 3⊃⍵: 1⊃⍵
        ⍝ Applying phase oracle to the vector state 
        mid_state ← (4⊃⍵)  ⍺⍺  (1⊃⍵)     
        ⍝ Applying difusser to the vector state
        mid_state ← (((2⊃⍵)-1) ({H}¨(2⊃⍵)))  stage  mid_state
        mid_state ← (((2⊃⍵)-1) ({X}¨(2⊃⍵))) stage mid_state
        mid_state ← (((2⊃⍵)-1) (({I}¨( ¯1↓((2⊃⍵)))) , ⊂H ) ) stage mid_state
        cx ← (n_qubits-1) #.quapl.gates.gCTR (#.quapl.gates.X) 
        mid_state  ← cx +.× mid_state
        mid_state ← (((2⊃⍵)-1) (({I}¨( ¯1↓((2⊃⍵)))) , ⊂H ) ) stage mid_state       
        mid_state ← (((2⊃⍵)-1) ({X}¨(2⊃⍵)))  stage mid_state
        mid_state ← (((2⊃⍵)-1) ({H}¨(2⊃⍵))) stage mid_state        
        ⍺⍺ grover_iter (mid_state (2⊃⍵)  ((3⊃⍵) - 1) (4⊃⍵)) 
    }     
    ⍺⍺ grover_iter (mid_state (⍳n_qubits) num_iter (2⊃⍵)) 
}
vs← #.quapl.circuit.thread_reg (#.quapl.circuit.reg 3)
#.quapl.lib.oracles.GROVER.phase #.quapl.lib._GROVER_ (vs ( (1 1 1) (0 1 1) (0 0 1) ) )