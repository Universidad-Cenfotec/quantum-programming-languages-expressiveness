Language,Algorithm,Construct,Line
cirq,01-deutsch-jotza,for,qubits = [cirq.LineQubit(i) for i in range(n)]
cirq,01-deutsch-jotza,for,circuit.append(cirq.H(q) for q in qubits + [aux_qubit])
cirq,01-deutsch-jotza,for,circuit.append(cirq.H(q) for q in qubits)
cirq,01-deutsch-jotza,for,qubits = [cirq.LineQubit(i) for i in range(n)]
cirq,01-deutsch-jotza,for,for q in qubits:
cirq,02-bernstein-vazirani,for,qubits = [cirq.LineQubit(i) for i in range(n + 1)]
cirq,02-bernstein-vazirani,on_each,circuit += cirq.H.on_each(*qubits)
cirq,02-bernstein-vazirani,for,"for i, bit in enumerate(reversed(s)):"
cirq,02-bernstein-vazirani,if,"if bit == ""1"":"
cirq,02-bernstein-vazirani,on_each,circuit += cirq.H.on_each(*qubits[:-1])
cirq,03-simon,for,qubits = [cirq.LineQubit(i) for i in range(2 * n)]
cirq,03-simon,for,"for i, bit in enumerate(reversed(s)):"
cirq,03-simon,if,if bit == '1':
cirq,03-simon,on_each,circuit.append(cirq.H.on_each(*qubits[:n]))
cirq,03-simon,on_each,circuit.append(cirq.H.on_each(*qubits[:n]))
cirq,04-grover,for,"for i, bit in enumerate(marked_state):"
cirq,04-grover,if,if bit == '0':
cirq,04-grover,for,"for i, bit in enumerate(marked_state):"
cirq,04-grover,if,if bit == '0':
cirq,04-grover,on_each,diffusion.append(cirq.H.on_each(*qubits))
cirq,04-grover,on_each,diffusion.append(cirq.X.on_each(*qubits))
cirq,04-grover,on_each,diffusion.append(cirq.X.on_each(*qubits))
cirq,04-grover,on_each,diffusion.append(cirq.H.on_each(*qubits))
cirq,04-grover,on_each,circuit.append(cirq.H.on_each(*qubits))
cirq,04-grover,for,for _ in range(iterations):
quapl,01-deutsch-jotza,⋄,⍺ {⍵:(((0 ⍺) (⊂SWAP)) stage mid_state) ⋄ mid_state} (⍺≠0)
quapl,01-deutsch-jotza,¨,stg_ctrl ← (((⍳n_qubits)-1) ({H}¨⍳n_qubits))
quapl,02-bernstein-vazirani,¨,stg_ctrl ← (((⍳(2⍟1⌷⍴(vs)) )-1) ({#.quapl.gates.H}¨( ⍳(2⍟1⌷⍴(vs)) )))
quapl,02-bernstein-vazirani,¨,"ops ← ((⍸(⍺)) -1),¨targets"
quapl,02-bernstein-vazirani,",","ops ← ((⍸(⍺)) -1),¨targets"
quapl,03-simon,¨,"ops ← ((⍸⊃⍺) - 1),¨(((2⍟1⌷⍴⍵) ÷ 2) + ((⍸⊃⍺) - 1))"
quapl,03-simon,",","ops ← ((⍸⊃⍺) - 1),¨(((2⍟1⌷⍴⍵) ÷ 2) + ((⍸⊃⍺) - 1))"
quapl,03-simon,¨,mid_state ← ((qubits_index) ({#.quapl.gates.H}¨qubits_index))  #.quapl.circuit.stage (⊃1↑⍵)
quapl,03-simon,¨,((qubits_index) ({#.quapl.gates.H}¨qubits_index))  #.quapl.circuit.stage  mid_state
quapl,04-grover,¨,((qubits_index) ({⍵=0:#.quapl.gates.X ⋄ ⍵=1:#.quapl.gates.I }¨ x )) #.quapl.circuit.stage vs
quapl,04-grover,⋄,((qubits_index) ({⍵=0:#.quapl.gates.X ⋄ ⍵=1:#.quapl.gates.I }¨ x )) #.quapl.circuit.stage vs
quapl,04-grover,¨,stg_ctrl ← (((⍳n_qubits)-1) ({H}¨(⍳n_qubits)))
quapl,04-grover,¨,mid_state ← (((2⊃⍵)-1) ({H}¨(2⊃⍵)))  stage  mid_state
quapl,04-grover,¨,mid_state ← (((2⊃⍵)-1) ({X}¨(2⊃⍵))) stage mid_state
quapl,04-grover,¨,"mid_state ← (((2⊃⍵)-1) (({I}¨( ¯1↓((2⊃⍵)))) , ⊂H ) ) stage mid_state"
quapl,04-grover,",","mid_state ← (((2⊃⍵)-1) (({I}¨( ¯1↓((2⊃⍵)))) , ⊂H ) ) stage mid_state"
quapl,04-grover,¨,"mid_state ← (((2⊃⍵)-1) (({I}¨( ¯1↓((2⊃⍵)))) , ⊂H ) ) stage mid_state"
quapl,04-grover,",","mid_state ← (((2⊃⍵)-1) (({I}¨( ¯1↓((2⊃⍵)))) , ⊂H ) ) stage mid_state"
quapl,04-grover,¨,mid_state ← (((2⊃⍵)-1) ({X}¨(2⊃⍵)))  stage mid_state
quapl,04-grover,¨,mid_state ← (((2⊃⍵)-1) ({H}¨(2⊃⍵))) stage mid_state
qiskit,01-deutsch-jotza,for,for i in range(n):
qiskit,02-bernstein-vazirani,for,"for i, bit in enumerate(reversed(s)):"
qiskit,02-bernstein-vazirani,if,"if bit == ""1"":"
qiskit,03-simon,for,"for i, bit in enumerate(reversed(s)):"
qiskit,03-simon,if,if bit == '1':
qiskit,04-grover,for,"for i, bit in enumerate(reversed(marked_state)):"
qiskit,04-grover,if,if bit == '0':
qiskit,04-grover,list,"oracle.mcx(list(range(n-1)), n-1)"
qiskit,04-grover,for,"for i, bit in enumerate(reversed(marked_state)):"
qiskit,04-grover,if,if bit == '0':
qiskit,04-grover,list,"diffusion.mcx(list(range(n-1)), n-1)"
qiskit,04-grover,for,for _ in range(iterations):
qiskit,05-vqsvd,and,Qiskit-based Variational Quantum SVD using ADAM and parameter-shift.
qiskit,05-vqsvd,for,for d in range(self.depth):
qiskit,05-vqsvd,for,for q in range(self.num_qubits):
qiskit,05-vqsvd,for,for q in range(self.num_qubits - 1):
qiskit,05-vqsvd,for,for idx in range(dim):
qiskit,05-vqsvd,for,"for q, bit in enumerate(bstr):"
qiskit,05-vqsvd,if,if bit == '1':
qiskit,05-vqsvd,for,"svals = [np.real(product[i, i]) for i in range(self.rank)]"
qiskit,05-vqsvd,for,delayed(grad_i)(i) for i in range(len(x))
qiskit,05-vqsvd,for,"for t in range(1, self.iterations + 1):"
qiskit,05-vqsvd,if,if t % 10 == 0 or t == 1 or t == self.iterations:
qiskit,05-vqsvd,or,if t % 10 == 0 or t == 1 or t == self.iterations:
qiskit,05-vqsvd,list,"svals_list: list,"
qiskit,05-vqsvd,for,"for i in range(1, rank + 1):"
qiskit,05-vqsvd,and,Initializes the plotting utility and creates the output directory.
qiskit,05-vqsvd,list,"def plot_loss_curve(self, losses: list):"
qiskit,05-vqsvd,and,Plots the loss curve over iterations and saves it.
qiskit,05-vqsvd,list,"def plot_singular_value_comparison(self, rank: int, vqsvd: list, svd: list):"
qiskit,05-vqsvd,for,Compares singular value reconstruction errors for VQSVD and classical SVD.
qiskit,05-vqsvd,and,Compares singular value reconstruction errors for VQSVD and classical SVD.
qiskit,05-vqsvd,list,"x = list(range(1, rank + 1))"
qiskit,05-vqsvd,and,Displays and saves the matrix as a grayscale image.
qiskit,05-vqsvd,with,Initializes the generator with a specified number of qubits.
qiskit,05-vqsvd,and,"Loads a grayscale image of size 2^n × 2^n and normalizes its pixel values to [0, 1]."
qiskit,05-vqsvd,if,"if __name__ == ""__main__"":"
qiskit,05-vqsvd,while,"print(""Starting training… (this may take a while)"")"
qrisp,01-deutsch-jotza,for,for i in range(len(input_qubits)):
qrisp,02-bernstein-vazirani,with,with qrisp.conjugate(qrisp.h)(qv):
qrisp,02-bernstein-vazirani,for,for i in range(len(s)):
qrisp,02-bernstein-vazirani,if,"if s[i] == ""1"":"
qrisp,03-simon,for,for i in range(len(s)):
qrisp,03-simon,if,"if s[i] == ""1"":"
qrisp,03-simon,with,with qrisp.conjugate(qrisp.h)(qv[:n]):
qmod,01-deutsch-jotza,within,within {
qmod,01-deutsch-jotza,apply,} apply {
qmod,01-deutsch-jotza,lambda,"my_oracle(lambda(x, y) {"
qmod,01-deutsch-jotza,lambda,"deutsch_jozsa(lambda(x, y) {"
qmod,02-bernstein-vazirani,repeat,repeat (i: x.len) {
qmod,02-bernstein-vazirani,if,if ((floor(a / (2 ** i)) % 2) == 1) {
qmod,02-bernstein-vazirani,within,within {
qmod,02-bernstein-vazirani,apply,} apply {
qmod,03-simon,lambda,"simon_qfunc(lambda(x, res) {"
qmod,04-grover,lambda,"grover_search(1, lambda(vars) {"
q#,01-deutsch-jotza,for,for i in 0..n-1 {
q#,01-deutsch-jotza,ApplyToEachA,"ApplyToEachA(H, qubits);"
q#,01-deutsch-jotza,ApplyToEachA,"ApplyToEachA(H, qubits[0..n-1]);"
q#,01-deutsch-jotza,MeasureEachZ,let results = MeasureEachZ(qubits[0..n-1]);
q#,02-bernstein-vazirani,ApplyToEachA,"ApplyToEachA(H, qubits[0..n - 1]);"
q#,02-bernstein-vazirani,for,for i in 0..n - 1 {
q#,02-bernstein-vazirani,if,if (s[n - 1 - i]) {
q#,02-bernstein-vazirani,ApplyToEachA,"ApplyToEachA(H, qubits[0..n - 1]);"
q#,02-bernstein-vazirani,MeasureEachZ,let results = MeasureEachZ(qubits[0..n-1]);
q#,03-simon,for,for i in 0..n - 1 {
q#,03-simon,if,if (s[n - 1 - i]) {
q#,03-simon,ApplyToEachA,"ApplyToEachA(H, qubits[0..n - 1]);"
q#,03-simon,ApplyToEachA,"ApplyToEachA(H, qubits[0..n - 1]);"
q#,03-simon,MeasureEachZ,let results = MeasureEachZ(qubits[0..n - 1]);
q#,04-grover,for,for i in 0..n - 1 {
q#,04-grover,if,if (not markedState[n - 1 - i]) {
q#,04-grover,for,for i in 0..n - 1 {
q#,04-grover,if,if (not markedState[n - 1 - i]) {
q#,04-grover,ApplyToEachA,"ApplyToEachA(H, qubits);"
q#,04-grover,ApplyToEachA,"ApplyToEachA(X, qubits);"
q#,04-grover,ApplyToEachA,"ApplyToEachA(X, qubits);"
q#,04-grover,ApplyToEachA,"ApplyToEachA(H, qubits);"
q#,04-grover,ApplyToEachA,"ApplyToEachA(H, qubits);"
q#,04-grover,for,for _ in 1..iterations {
q#,04-grover,MeasureEachZ,let results = MeasureEachZ(qubits[0..n - 1]);
pennylane,05-vqsvd,qml.device,"dev = qml.device(""lightning.qubit"", wires=num_qubits)"
pennylane,05-vqsvd,qml.qnode,@qml.qnode(dev)
paddle,05-vqsvd,list,"loss is a list, this function plots loss over iteration"
paddle,05-vqsvd,list,"plt.plot(list(range(1, len(loss)+1)), loss)"
paddle,05-vqsvd,for,for _ in range(depth):
paddle,05-vqsvd,for,for i in range(self.rank):
paddle,05-vqsvd,for,for itr in range(self.itr):
paddle,05-vqsvd,if,if itr% 10 == 0:
paddle,05-vqsvd,for,for i in range(RANK):
paddle,05-vqsvd,list,"ax.plot(list(range(1, RANK+1)), err_subfull, ""o-."","
paddle,05-vqsvd,list,"ax.plot(list(range(1, RANK+1)), err_SVD, ""^--"","
paddle,05-vqsvd,list,"imgmat = np.array(list(img.getdata(band=0)), float)"
paddle,05-vqsvd,for,"for i in range(5, 16, 5):"
paddle,05-vqsvd,list,"imgmat = np.array(list(img.getdata(band=0)), float)"
paddle,05-vqsvd,for,for _ in range(depth):
